 /**
* JJTree file.
* Constructed for Regex expression.
* In BNF, Regex expression is defined as
* RE := ID
* RE := RE RE
* RE := RE? "|" RE?
* RE := "(" RE ")"
* RE := RE OP
* where
* ID := letter ( letter | digit ) * | "." | "$" | "^"
* OP := * | + | ?
* Run / modify the test RegexTest.java to test the syntax.
*/options{  JDK_VERSION = "1.5";  STATIC = false; // nonstatic generation.
  TRACK_TOKENS = true; // tokens are necessary.
  NODE_CLASS = "com.jeeex.objregex.javacc.EnhancedNode";  VISITOR = true;  VISITOR_RETURN_TYPE = "com.jeeex.objregex.impl.State";  VISITOR_DATA_TYPE = "com.jeeex.objregex.impl.SingleTransitionFactory";  MULTI = true;}PARSER_BEGIN(RegexParser)package com.jeeex.objregex.javacc;public class RegexParser{}PARSER_END(RegexParser)SKIP :{  " "| "\t"| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}TOKEN : /* operators on predicates */{  < NOT : "!" >}TOKEN : /* IDENTIFIERS */{  < SPECIAL_IDENTIFIER :    "$"  | "^" >| < IDENTIFIER :    "."  |    (      < LETTER >      (        < LETTER >      | < DIGIT >      )*    ) >| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >| < #DIGIT : [ "0"-"9" ] >}TOKEN :{  < POSTFIX_OPERATOR :    "*"  | "+"  | "?" >}SimpleNode Start() :{}{  Expression() < EOF >  {    return jjtThis;  }}// Sequence of ConcatExpr, delimited by pipes.void Expression() :{}{  ConcatExpr()  (    "|" ConcatExpr()  )*}// Concatonation is implicit in Regex.
// Concatonation maybe be empty.void ConcatExpr() :{}{  (    OperatorExpr()  )*}void OperatorExpr() :{}{  (    Term()    (      Operator()    )*  )}void Operator() :{}{  < POSTFIX_OPERATOR >}void Term() :{}{  SpecialIdentifier()| Identifier()
| NegativeIdentifier()| "(" Expression() ")"}void NegativeIdentifier() :{}{  < NOT > Identifier()}void SpecialIdentifier() :{}{  < SPECIAL_IDENTIFIER >}void Identifier() :{}{  < IDENTIFIER >}