 /**
* JJTree file.
* Constructed for Regex expression.
* In BNF, Regex expression is defined as
* RE := ID
* RE := RE RE
* RE := RE "|" RE
* RE := "(" RE ")"
* RE := RE OP
* where
* ID := letter ( letter | digit ) * | "."
* OP := * | + | ?
* 
*/options{  JDK_VERSION = "1.5";  STATIC = false; // nonstatic generation.
  TRACK_TOKENS = true; // tokens are necessary.
}PARSER_BEGIN(RegexParser)package com.jeeex.objregex.javacc;public class RegexParser{}PARSER_END(RegexParser)SKIP :{  " "| "\t"| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}TOKEN : /* IDENTIFIERS */{  < IDENTIFIER :    "."  |    (      < LETTER >      (        < LETTER >      | < DIGIT >      )*    ) >| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >| < #DIGIT : [ "0"-"9" ] >}TOKEN :{  < POSTFIX_OPERATOR :    "*"  | "+"  | "?" >}SimpleNode Start() :{}{  Expression()  {    return jjtThis;  }}void Expression() :{}{  ConcatExpr()}void ConcatExpr() :{}{  OrExpr()  (    OrExpr()  )*}void OrExpr() :{}{  OperatorExpr()  (    "|" OperatorExpr()  )*}void OperatorExpr() :{}{  Term() (< POSTFIX_OPERATOR >)*}void Term() :{}{  < IDENTIFIER >| "(" Expression() ")"}